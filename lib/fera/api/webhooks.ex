# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Fera.Api.Webhooks do
  @moduledoc """
  API calls for all endpoints tagged `Webhooks`.
  """

  alias Fera.Connection
  import Fera.RequestBuilder

  @doc """
  Create Webhook
  Subscribes to the specified webhook event.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (CreateWebhookRequest): Object creation attributes.

  ### Returns

  - `{:ok, Fera.Model.Webhook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_webhook(Tesla.Env.client, keyword()) :: {:ok, Fera.Model.CreateWebhook422Response.t} | {:ok, Fera.Model.Webhook.t} | {:error, Tesla.Env.t}
  def create_webhook(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/webhooks")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Fera.Model.Webhook},
      {422, Fera.Model.CreateWebhook422Response}
    ])
  end

  @doc """
  Delete Webhook
  Delete specific webhook.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the webhook you want to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_webhook(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def delete_webhook(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/webhooks/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, false},
      {405, false}
    ])
  end

  @doc """
  List Webhooks
  Retrieve a list of webhooks.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:event_name` (String.t): 
    - `:status` (String.t): 
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListWebhooks200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_webhooks(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.ListWebhooks200Response.t} | {:error, Tesla.Env.t}
  def list_webhooks(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :event_name => :query,
      :status => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/webhooks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListWebhooks200Response},
      {400, false}
    ])
  end

  @doc """
  Retrieve Webhook
  Retrieve data for a specific webhook.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera  ID of the webhook
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Fera.Model.Webhook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_webhook(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Webhook.t} | {:error, Tesla.Env.t}
  def retrieve_webhook(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/webhooks/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.Webhook},
      {404, false}
    ])
  end

  @doc """
  Test Webhook
  Test out the webhook connection. This also refreshes the webhook's status model data.    If the webhook URL does not return a successful response or cannot be reached then a `422` error will be returned with a message telling you what your server responded with.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the webhook you want to test.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec test_webhook(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Fera.Model.TestWebhook422Response.t} | {:ok, Fera.Model.TestWebhook404Response.t} | {:error, Tesla.Env.t}
  def test_webhook(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/webhooks/#{id}/test")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {404, Fera.Model.TestWebhook404Response},
      {422, Fera.Model.TestWebhook422Response}
    ])
  end

  @doc """
  Update Webhook
  Update data for a specific webhook.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the webhook you want to update.
  - `opts` (keyword): Optional parameters
    - `:body` (CreateWebhookRequestData): Object creation attributes.

  ### Returns

  - `{:ok, Fera.Model.Webhook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_webhook(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Webhook.t} | {:error, Tesla.Env.t}
  def update_webhook(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/webhooks/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Fera.Model.Webhook},
      {404, false},
      {422, false}
    ])
  end
end
