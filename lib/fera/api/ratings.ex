# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Fera.Api.Ratings do
  @moduledoc """
  API calls for all endpoints tagged `Ratings`.
  """

  alias Fera.Connection
  import Fera.RequestBuilder

  @doc """
  List All Product Aggregate Ratings
  Retrieve a list of product ratings.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:external_id` (String.t): External product ID (usually the Wix, Shopify or other eCommerce platform product ID).
    - `:external_ids` (String.t): Comma-separated list of external product IDs (usually the Wix, Shopify or other eCommerce platform product IDs).
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: count:desc would get you count in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListProductRatings200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_product_ratings(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.ListProductRatings200Response.t} | {:error, Tesla.Env.t}
  def list_product_ratings(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :subject => :query,
      :external_id => :query,
      :external_ids => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/products/ratings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListProductRatings200Response},
      {400, false}
    ])
  end

  @doc """
  Retrieve Product Aggregate Rating
  Retrieve a specific product's aggregate rating information (average rating and rating/review count).

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera or external ID of the product.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Fera.Model.Rating.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_product_rating(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Rating.t} | {:error, Tesla.Env.t}
  def retrieve_product_rating(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/products/#{id}/rating")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.Rating},
      {404, false}
    ])
  end

  @doc """
  Retrieve Store Rating
  Retrieve the aggregate store rating across all products and reviews.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Fera.Model.AbstractRating.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_rating(Tesla.Env.client, keyword()) :: {:ok, Fera.Model.AbstractRating.t} | {:error, Tesla.Env.t}
  def retrieve_rating(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/store/rating")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.AbstractRating}
    ])
  end
end
