# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Fera.Api.Products do
  @moduledoc """
  API calls for all endpoints tagged `Products`.
  """

  alias Fera.Connection
  import Fera.RequestBuilder

  @doc """
  Create Product
  Create new product.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (CreateProductRequest): Object creation attributes.

  ### Returns

  - `{:ok, Fera.Model.Product.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_product(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Product.t} | {:error, Tesla.Env.t}
  def create_product(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/products")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Fera.Model.Product},
      {422, false}
    ])
  end

  @doc """
  Delete Product
  Delete specific product.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the product you want to delete. External ID is also accepted here
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_product(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def delete_product(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/products/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, false},
      {405, false}
    ])
  end

  @doc """
  List Product Photos & Videos
  Retrieve a list of media that belong to a product, if any.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera  or external ID of the product
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"product.id"` (String.t): Filter by Fera product ID or external product ID.
    - `:"product.ids"` (String.t): Filter by multiple Fera product IDs or external product IDs. Comma-separated list or array of fields accepted.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:"order.id"` (String.t): Filter by Fera order ID or external order ID.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:verified` (boolean()): Only show content submitted by verified sources (or unverified sources).
    - `:state` (String.t): State of the resource. Resources are initially in the `pending_approval` state when submitted by customers from the storefront.
    - `:type` (String.t): Type of media: `photo` or `video`.    Can also be used to filter the subject at the same time. For example: `product_photo`.
    - `:"review.id"` (String.t): Review that the media is a part of (submitted along with).
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListCustomerMedia200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_product_media(Tesla.Env.client, String.t, keyword()) :: {:ok, Fera.Model.ListCustomerMedia200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_product_media(connection, id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"product.id" => :query,
      :"product.ids" => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :"order.id" => :query,
      :subject => :query,
      :verified => :query,
      :state => :query,
      :type => :query,
      :"review.id" => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/products/#{id}/media")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListCustomerMedia200Response},
      {404, false}
    ])
  end

  @doc """
  List All Product Aggregate Ratings
  Retrieve a list of product ratings.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:external_id` (String.t): External product ID (usually the Wix, Shopify or other eCommerce platform product ID).
    - `:external_ids` (String.t): Comma-separated list of external product IDs (usually the Wix, Shopify or other eCommerce platform product IDs).
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: count:desc would get you count in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListProductRatings200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_product_ratings(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.ListProductRatings200Response.t} | {:error, Tesla.Env.t}
  def list_product_ratings(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :subject => :query,
      :external_id => :query,
      :external_ids => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/products/ratings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListProductRatings200Response},
      {400, false}
    ])
  end

  @doc """
  List Product Reviews
  Retrieve a list of reviews that belong to a product, if any.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera  or external ID of the product
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"product.id"` (String.t): Filter by Fera product ID or external product ID.
    - `:"product.ids"` (String.t): Filter by multiple Fera product IDs or external product IDs. Comma-separated list or array of fields accepted.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:"order.id"` (String.t): Filter by Fera order ID or external order ID.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:verified` (boolean()): Only show content submitted by verified sources (or unverified sources).
    - `:state` (String.t): State of the resource. Resources are initially in the `pending_approval` state when submitted by customers from the storefront.
    - `:source` (String.t): Source from where reviews can be added. Resources are when submitted by customers from the storefront, imported from external review app or using csv import, manual import.
    - `:channel_code` (String.t): Review Channel from where reviews are synced. e.g. amazon, facebook, trustpilot, etc.
    - `:rating` (String.t): Search for customer reviews by rating.
    - `:only_with_content` (String.t): Only show reviews with any textual content (summary or body).
    - `:"customer.email"` (String.t): Filter by customer email
    - `:search` (String.t): Search by any of the following columns: `id`, `product.id`, `product.external_id`, `product.sku`, `customer.id`, `customer.external_id`, `customer.email`, `customer.name`, `media[*].id`, etc
    - `:"counts.media"` (String.t): Search for a customer by the number of media(photos or videos) they have submitted.
    - `:date_created` (String.t): Search for customer reviews within a date range using the created_at date.
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListCustomerReviews200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_product_reviews(Tesla.Env.client, String.t, keyword()) :: {:ok, Fera.Model.ListCustomerReviews200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_product_reviews(connection, id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"product.id" => :query,
      :"product.ids" => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :"order.id" => :query,
      :subject => :query,
      :verified => :query,
      :state => :query,
      :source => :query,
      :channel_code => :query,
      :rating => :query,
      :only_with_content => :query,
      :"customer.email" => :query,
      :search => :query,
      :"counts.media" => :query,
      :date_created => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/products/#{id}/reviews")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListCustomerReviews200Response},
      {404, false}
    ])
  end

  @doc """
  List Products
  Retrieve a list of products that Fera has stored information about. You can use these product   endpoints to grab product data from Fera including ratings for each product.    However, keep in mind that Fera may have not have received complete product info from your store/server, but ratings/reviews may still exist.    That's why if you're fetching ratings or reviews, you should use the `/ratings` and `/reviews` endpoints respectively instead.   Both endpoints have `product_id` filter capabilities.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:external_id` (String.t): External product ID (usually the Wix, Shopify or other eCommerce platform product ID).
    - `:external_ids` (String.t): Comma-separated list of external product IDs (usually the Wix, Shopify or other eCommerce platform product IDs).
    - `:search` (String.t): Search for products by name, SKU, external ID or ID.
    - `:rating` (String.t): Search for products by rating.
    - `:"counts.reviews"` (String.t): Search for products by the number of reviews they have received.
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListProducts200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_products(Tesla.Env.client, keyword()) :: {:ok, Fera.Model.ListProducts200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_products(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :external_id => :query,
      :external_ids => :query,
      :search => :query,
      :rating => :query,
      :"counts.reviews" => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/products")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListProducts200Response},
      {400, false}
    ])
  end

  @doc """
  List All Product Photos & Videos
  Retrieve a list of all photos and videos submitted by customers that are about a product.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"product.id"` (String.t): Filter by Fera product ID or external product ID.
    - `:"product.ids"` (String.t): Filter by multiple Fera product IDs or external product IDs. Comma-separated list or array of fields accepted.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:"order.id"` (String.t): Filter by Fera order ID or external order ID.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:verified` (boolean()): Only show content submitted by verified sources (or unverified sources).
    - `:state` (String.t): State of the resource. Resources are initially in the `pending_approval` state when submitted by customers from the storefront.
    - `:type` (String.t): Type of media: `photo` or `video`.    Can also be used to filter the subject at the same time. For example: `product_photo`.
    - `:"review.id"` (String.t): Review that the media is a part of (submitted along with).
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListMedia200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_products_media(Tesla.Env.client, keyword()) :: {:ok, Fera.Model.ListMedia200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_products_media(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"product.id" => :query,
      :"product.ids" => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :"order.id" => :query,
      :subject => :query,
      :verified => :query,
      :state => :query,
      :type => :query,
      :"review.id" => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/products/media")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListMedia200Response},
      {400, false}
    ])
  end

  @doc """
  List All Product Reviews
  Retrieve a list of product reviews. That is, retrieve all reviews that are about products.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"product.id"` (String.t): Filter by Fera product ID or external product ID.
    - `:"product.ids"` (String.t): Filter by multiple Fera product IDs or external product IDs. Comma-separated list or array of fields accepted.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:"order.id"` (String.t): Filter by Fera order ID or external order ID.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:verified` (boolean()): Only show content submitted by verified sources (or unverified sources).
    - `:state` (String.t): State of the resource. Resources are initially in the `pending_approval` state when submitted by customers from the storefront.
    - `:source` (String.t): Source from where reviews can be added. Resources are when submitted by customers from the storefront, imported from external review app or using csv import, manual import.
    - `:channel_code` (String.t): Review Channel from where reviews are synced. e.g. amazon, facebook, trustpilot, etc.
    - `:rating` (String.t): Search for customer reviews by rating.
    - `:only_with_content` (String.t): Only show reviews with any textual content (summary or body).
    - `:"customer.email"` (String.t): Filter by customer email
    - `:search` (String.t): Search by any of the following columns: `id`, `product.id`, `product.external_id`, `product.sku`, `customer.id`, `customer.external_id`, `customer.email`, `customer.name`, `media[*].id`, etc
    - `:"counts.media"` (String.t): Search for a customer by the number of media(photos or videos) they have submitted.
    - `:date_created` (String.t): Search for customer reviews within a date range using the created_at date.
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListReviews200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_products_reviews(Tesla.Env.client, keyword()) :: {:ok, Fera.Model.ListReviews200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_products_reviews(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"product.id" => :query,
      :"product.ids" => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :"order.id" => :query,
      :subject => :query,
      :verified => :query,
      :state => :query,
      :source => :query,
      :channel_code => :query,
      :rating => :query,
      :only_with_content => :query,
      :"customer.email" => :query,
      :search => :query,
      :"counts.media" => :query,
      :date_created => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/products/reviews")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListReviews200Response},
      {400, false}
    ])
  end

  @doc """
  Retrieve Product
  Retrieve data for a specific product.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera  or external ID of the product
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Fera.Model.Product.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_product(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Product.t} | {:error, Tesla.Env.t}
  def retrieve_product(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/products/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.Product},
      {404, false}
    ])
  end

  @doc """
  Retrieve Product Aggregate Rating
  Retrieve a specific product's aggregate rating information (average rating and rating/review count).

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera or external ID of the product.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Fera.Model.Rating.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_product_rating(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Rating.t} | {:error, Tesla.Env.t}
  def retrieve_product_rating(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/products/#{id}/rating")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.Rating},
      {404, false}
    ])
  end

  @doc """
  Update Product
  Update data for a specific product.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the product you want to update. External ID is also accepted here
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateProductRequest): Object creation attributes.

  ### Returns

  - `{:ok, Fera.Model.Product.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_product(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Product.t} | {:error, Tesla.Env.t}
  def update_product(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/products/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Fera.Model.Product},
      {404, false},
      {422, false}
    ])
  end
end
