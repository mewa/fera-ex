# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Fera.Api.Orders do
  @moduledoc """
  API calls for all endpoints tagged `Orders`.
  """

  alias Fera.Connection
  import Fera.RequestBuilder

  @doc """
  Create Order
  Create new order.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (CreateOrderRequest): Object creation attributes.

  ### Returns

  - `{:ok, Fera.Model.Order.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_order(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Order.t} | {:error, Tesla.Env.t}
  def create_order(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/orders")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Fera.Model.Order},
      {422, false}
    ])
  end

  @doc """
  Delete Order
  Delete specific order.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the order you want to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_order(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def delete_order(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/orders/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, false},
      {405, false}
    ])
  end

  @doc """
  Deliver Order
  Mark an order as delivered.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the order you want to deliver.
  - `opts` (keyword): Optional parameters
    - `:body` (DeliverOrderRequest): Object creation attributes.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec deliver_order(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Map.t} | {:ok, Fera.Model.DeliverOrder422Response.t} | {:error, Tesla.Env.t}
  def deliver_order(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/orders/#{id}/deliver")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, false},
      {405, false},
      {422, Fera.Model.DeliverOrder422Response}
    ])
  end

  @doc """
  Fulfill Order
  Mark an order as fulfilled.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the order you want to fulfill.
  - `opts` (keyword): Optional parameters
    - `:body` (FulfillOrderRequest): Object creation attributes.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec fulfill_order(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Fera.Model.FulfillOrder422Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def fulfill_order(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/orders/#{id}/fulfill")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, false},
      {405, false},
      {422, Fera.Model.FulfillOrder422Response}
    ])
  end

  @doc """
  List Orders
  Retrieve a list of orders.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:external_id` (String.t): External order ID (usually the Wix, Shopify or other eCommerce platform order ID).
    - `:external_ids` (String.t): Comma-separated list of external order ID (usually the Wix, Shopify or other eCommerce platform order IDs).
    - `:search` (String.t): Search by any of the following columns: `number`, `line_items`, `platform_data`, `platform_order_id`, `platform_customer_id`, `customer.id`, `customer.external_id`, `customer.email`, `customer.name`, etc
    - `:"counts.media"` (String.t): Search for an order by the number of media(photos or videos) associated with it.
    - `:"counts.reviews"` (String.t): Search for an order by the number of reviews associated to it.
    - `:rating` (String.t): Search for orders by rating.
    - `:status` (String.t): Search for an order by its status. Possible values are: `paid`, `fulfilled`, `delivered`.
    - `:external_created_at` (String.t): Search for orders within a date range using the external_created_at date, with fallback to the internal created_at date.
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListOrders200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_orders(Tesla.Env.client, keyword()) :: {:ok, Fera.Model.ListOrders200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_orders(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :external_id => :query,
      :external_ids => :query,
      :search => :query,
      :"counts.media" => :query,
      :"counts.reviews" => :query,
      :rating => :query,
      :status => :query,
      :external_created_at => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/orders")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListOrders200Response},
      {400, false}
    ])
  end

  @doc """
  Pay Order
  Mark an order as paid.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the order you want to pay.
  - `opts` (keyword): Optional parameters
    - `:body` (PayOrderRequest): Object creation attributes.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec pay_order(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Map.t} | {:ok, Fera.Model.PayOrder422Response.t} | {:error, Tesla.Env.t}
  def pay_order(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/orders/#{id}/pay")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, false},
      {405, false},
      {422, Fera.Model.PayOrder422Response}
    ])
  end

  @doc """
  Retrieve Order
  Retrieve data for a specific order.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera  ID of the order
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Fera.Model.Order.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_order(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Order.t} | {:error, Tesla.Env.t}
  def retrieve_order(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/orders/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.Order},
      {404, false}
    ])
  end

  @doc """
  Update Order
  Update data for a specific order.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the order you want to update.
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateOrderRequest): Object creation attributes.

  ### Returns

  - `{:ok, Fera.Model.Order.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_order(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Order.t} | {:error, Tesla.Env.t}
  def update_order(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/orders/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Fera.Model.Order},
      {404, false},
      {422, false}
    ])
  end
end
