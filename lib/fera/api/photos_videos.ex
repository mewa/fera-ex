# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Fera.Api.PhotosVideos do
  @moduledoc """
  API calls for all endpoints tagged `PhotosVideos`.
  """

  alias Fera.Connection
  import Fera.RequestBuilder

  @doc """
  Approve Photo or Video
  Approve a specific media.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the media you want to approve.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec approve_media(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Fera.Model.ApproveMedia422Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def approve_media(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/media/#{id}/approve")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, false},
      {405, false},
      {422, Fera.Model.ApproveMedia422Response}
    ])
  end

  @doc """
  Create Photo or Video
  Create new media.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (CreateMediaRequest): Object creation attributes.

  ### Returns

  - `{:ok, Fera.Model.Media.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_media(Tesla.Env.client, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Media.t} | {:error, Tesla.Env.t}
  def create_media(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/media")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Fera.Model.Media},
      {422, false}
    ])
  end

  @doc """
  Decline Photo or Video
  Decline a specific media.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the media you want to decline.
  - `opts` (keyword): Optional parameters
    - `:body` (DeclineReviewRequest): Object creation attributes.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec decline_media(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Fera.Model.DeclineMedia422Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def decline_media(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/media/#{id}/decline")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, false},
      {405, false},
      {422, Fera.Model.DeclineMedia422Response}
    ])
  end

  @doc """
  Delete Photo or Video
  Delete specific media.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the media you want to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_media(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def delete_media(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/media/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {404, false},
      {405, false}
    ])
  end

  @doc """
  List Customer Photos & Videos
  Retrieve a list of media that belong to a customer, if any.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera  or external ID of the customer
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"product.id"` (String.t): Filter by Fera product ID or external product ID.
    - `:"product.ids"` (String.t): Filter by multiple Fera product IDs or external product IDs. Comma-separated list or array of fields accepted.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:"order.id"` (String.t): Filter by Fera order ID or external order ID.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:verified` (boolean()): Only show content submitted by verified sources (or unverified sources).
    - `:state` (String.t): State of the resource. Resources are initially in the `pending_approval` state when submitted by customers from the storefront.
    - `:type` (String.t): Type of media: `photo` or `video`.    Can also be used to filter the subject at the same time. For example: `product_photo`.
    - `:"review.id"` (String.t): Review that the media is a part of (submitted along with).
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListCustomerMedia200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_customer_media(Tesla.Env.client, String.t, keyword()) :: {:ok, Fera.Model.ListCustomerMedia200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_customer_media(connection, id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"product.id" => :query,
      :"product.ids" => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :"order.id" => :query,
      :subject => :query,
      :verified => :query,
      :state => :query,
      :type => :query,
      :"review.id" => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/customers/#{id}/media")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListCustomerMedia200Response},
      {404, false}
    ])
  end

  @doc """
  List Photos & Videos
  Retrieve a list of media.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"product.id"` (String.t): Filter by Fera product ID or external product ID.
    - `:"product.ids"` (String.t): Filter by multiple Fera product IDs or external product IDs. Comma-separated list or array of fields accepted.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:"order.id"` (String.t): Filter by Fera order ID or external order ID.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:verified` (boolean()): Only show content submitted by verified sources (or unverified sources).
    - `:state` (String.t): State of the resource. Resources are initially in the `pending_approval` state when submitted by customers from the storefront.
    - `:type` (String.t): Type of media: `photo` or `video`.    Can also be used to filter the subject at the same time. For example: `product_photo`.
    - `:"review.id"` (String.t): Review that the media is a part of (submitted along with).
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListMedia200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_media(Tesla.Env.client, keyword()) :: {:ok, Fera.Model.ListMedia200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_media(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"product.id" => :query,
      :"product.ids" => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :"order.id" => :query,
      :subject => :query,
      :verified => :query,
      :state => :query,
      :type => :query,
      :"review.id" => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/media")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListMedia200Response},
      {400, false}
    ])
  end

  @doc """
  List Product Photos & Videos
  Retrieve a list of media that belong to a product, if any.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera  or external ID of the product
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"product.id"` (String.t): Filter by Fera product ID or external product ID.
    - `:"product.ids"` (String.t): Filter by multiple Fera product IDs or external product IDs. Comma-separated list or array of fields accepted.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:"order.id"` (String.t): Filter by Fera order ID or external order ID.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:verified` (boolean()): Only show content submitted by verified sources (or unverified sources).
    - `:state` (String.t): State of the resource. Resources are initially in the `pending_approval` state when submitted by customers from the storefront.
    - `:type` (String.t): Type of media: `photo` or `video`.    Can also be used to filter the subject at the same time. For example: `product_photo`.
    - `:"review.id"` (String.t): Review that the media is a part of (submitted along with).
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListCustomerMedia200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_product_media(Tesla.Env.client, String.t, keyword()) :: {:ok, Fera.Model.ListCustomerMedia200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_product_media(connection, id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"product.id" => :query,
      :"product.ids" => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :"order.id" => :query,
      :subject => :query,
      :verified => :query,
      :state => :query,
      :type => :query,
      :"review.id" => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/products/#{id}/media")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListCustomerMedia200Response},
      {404, false}
    ])
  end

  @doc """
  List All Product Photos & Videos
  Retrieve a list of all photos and videos submitted by customers that are about a product.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"product.id"` (String.t): Filter by Fera product ID or external product ID.
    - `:"product.ids"` (String.t): Filter by multiple Fera product IDs or external product IDs. Comma-separated list or array of fields accepted.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:"order.id"` (String.t): Filter by Fera order ID or external order ID.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:verified` (boolean()): Only show content submitted by verified sources (or unverified sources).
    - `:state` (String.t): State of the resource. Resources are initially in the `pending_approval` state when submitted by customers from the storefront.
    - `:type` (String.t): Type of media: `photo` or `video`.    Can also be used to filter the subject at the same time. For example: `product_photo`.
    - `:"review.id"` (String.t): Review that the media is a part of (submitted along with).
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListMedia200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_products_media(Tesla.Env.client, keyword()) :: {:ok, Fera.Model.ListMedia200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_products_media(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"product.id" => :query,
      :"product.ids" => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :"order.id" => :query,
      :subject => :query,
      :verified => :query,
      :state => :query,
      :type => :query,
      :"review.id" => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/products/media")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListMedia200Response},
      {400, false}
    ])
  end

  @doc """
  List All Store Photos & Videos
  Retrieve a list of all photos and videos submitted by customers that are about the store or overall experience.  This returns only photos/videos that are not linked to a specific product.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Current page number, if pagination used.
    - `:page_size` (integer()): Number of items per page.
    - `:limit` (integer()): Maximum number of items retrieved.
    - `:offset` (integer()): Starting position of items request query.
    - `:"product.id"` (String.t): Filter by Fera product ID or external product ID.
    - `:"product.ids"` (String.t): Filter by multiple Fera product IDs or external product IDs. Comma-separated list or array of fields accepted.
    - `:"customer.external_id"` (String.t): External customer ID (usually the Wix, Shopify or other eCommerce platform customer ID).
    - `:customer_id` (String.t): Filter by Fera customer ID or external customer ID.
    - `:"order.id"` (String.t): Filter by Fera order ID or external order ID.
    - `:subject` (String.t): Filter by what the resource is describing; A specific product, the entire store (ie overall experience) or both (all). Default: both.
    - `:verified` (boolean()): Only show content submitted by verified sources (or unverified sources).
    - `:state` (String.t): State of the resource. Resources are initially in the `pending_approval` state when submitted by customers from the storefront.
    - `:type` (String.t): Type of media: `photo` or `video`.    Can also be used to filter the subject at the same time. For example: `product_photo`.
    - `:"review.id"` (String.t): Review that the media is a part of (submitted along with).
    - `:sort_by` (String.t): Sort (order) the response results by the given attribute.  Add `:desc` to sort in descending order, or `:asc` to sort in ascending order.  For example: created_at:desc would get you created_at in descending order.

  ### Returns

  - `{:ok, Fera.Model.ListMedia200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec list_store_media(Tesla.Env.client, keyword()) :: {:ok, Fera.Model.ListMedia200Response.t} | {:ok, Map.t} | {:error, Tesla.Env.t}
  def list_store_media(connection, opts \\ []) do
    optional_params = %{
      :page => :query,
      :page_size => :query,
      :limit => :query,
      :offset => :query,
      :"product.id" => :query,
      :"product.ids" => :query,
      :"customer.external_id" => :query,
      :customer_id => :query,
      :"order.id" => :query,
      :subject => :query,
      :verified => :query,
      :state => :query,
      :type => :query,
      :"review.id" => :query,
      :sort_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/store/media")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.ListMedia200Response},
      {400, false}
    ])
  end

  @doc """
  Retrieve Photo or Video
  Retrieve data for a specific media.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): Fera  ID of the media
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Fera.Model.Media.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_media(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Media.t} | {:error, Tesla.Env.t}
  def retrieve_media(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/media/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Fera.Model.Media},
      {404, false}
    ])
  end

  @doc """
  Update Photo or Video
  Update data for a specific media.

  ### Parameters

  - `connection` (Fera.Connection): Connection to server
  - `id` (String.t): ID of the media you want to update.
  - `opts` (keyword): Optional parameters
    - `:body` (UpdateMediaRequest): Object creation attributes.

  ### Returns

  - `{:ok, Fera.Model.Media.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec update_media(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, Fera.Model.Media.t} | {:error, Tesla.Env.t}
  def update_media(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:put)
      |> url("/media/#{id}")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202, Fera.Model.Media},
      {404, false},
      {422, false}
    ])
  end
end
